#!/usr/bin/ruby

require 'sequel'
require 'yaml'
require 'net/smtp'

db = Sequel.connect("sqlite://#{Dir.pwd}/bof-o-matic.sqlite3")
cfg = YAML.load(File.read("bof-o-matic.yaml"))

class Mail < Sequel::Model
end

def log(level, msg, id=nil)
  if(id) then
    puts "#{level.to_s.upcase}: [#{id}] #{msg}"
  else
    puts "#{level.to_s.upcase}: #{msg}"
  end
end

while true do
  if(cfg['email_hold']) then
    # if we want to hold emails in the queue for testing or because of a system
    # issue, just keep waiting until that flag is removed
    log :warn, "Email queue is on hold in configuration file, waiting..."
    while(cfg['email_hold']) do
      sleep 60
      cfg = YAML.load(File.read("bof-o-matic.yaml"))
    end
  end

  Mail.where(status: ['READY', 'RETRY']).each do |message|
    if(cfg['email_to_domain_filter']) then
      unless(cfg['email_to_domain_filter'].include? message[:to_address].split('@')[1]) then
        log :warn, "Skipping email to #{message[:to_address]} as it does not match the defined domain filter (#{cfg['email_to_domain_filter']})", message[:id]
        next
      end
    end

    email_body = <<~EOF
      From: #{cfg['email_from']}
      To: #{message[:to_address]}
      Subject: #{message[:subject]}
      
      #{message[:body]}
    EOF
    begin
      smtp = Net::SMTP.new(cfg['smtp_server'], cfg['smtp_port'])
      smtp.start('bof-o-matic')
      smtp.send_message(email_body, cfg['email_from'], message[:to_address]);
    rescue Net::SMTPFatalError => e
      log :warn, "Fatal error sending mail: #{e.replace("\n", " ")}, marking as ERROR", message[:id]
      message.status = 'ERROR'
      message.save
      smtp.finish
    rescue StandardError => e
      log :warn, "Temporary error sending mail: #{e}, marking as RETRY", message[:id]
      message.status = 'RETRY'
      message.save
    else
      log :info, "Successfully sent message to #{message[:to_address]}", message[:id]
      if(cfg['keep_sent_mail']) then
        # Commented this out for testing only!
        message.status = 'SENT'
        message.save
      else
        message.destroy
      end
      smtp.finish
    end
  end

  sleep 60
end
