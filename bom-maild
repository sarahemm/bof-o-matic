#!/usr/bin/ruby

require 'sequel'
require 'yaml'
require 'net/smtp'
require 'logger'
require 'optparse'

logger = Logger.new(STDOUT, progname: 'bom-maild')
logger.level = Logger::WARN

foreground = false
opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end

  opts.on("-f", "--foreground", "Don't daemonize, stay in foreground and send logs to stdout") do
    foreground = true
  end

  opts.on("-l", "--log-level=LEVEL", "Log level (debug, info, warn, or error)") do |level|
    logger.level = level
  end
end
opt_parser.parse!

db = Sequel.connect("sqlite://#{Dir.pwd}/bof-o-matic.sqlite3")
cfg = YAML.load(File.read("bof-o-matic.yaml"))

require './bom_models.rb'

if(!foreground) then
  logger.reopen("bom-maild.log") # TODO: this should be configurable
  Process.daemon
end

while true do
  logger.debug "Starting mail run"
  if(cfg['email_hold']) then
    # if we want to hold emails in the queue for testing or because of a system
    # issue, just keep waiting until that flag is removed
    logger.warn "Email queue is on hold in configuration file, waiting..."
    while(cfg['email_hold']) do
      sleep 60
      cfg = YAML.load(File.read("bof-o-matic.yaml"))
    end
    logger.warn "Email queue hold has been released, proceeding"
  end

  Mail.where(status: ['READY', 'RETRY']).each do |message|
    if(cfg['email_to_domain_filter']) then
      unless(cfg['email_to_domain_filter'].include? message[:to_address].split('@')[1]) then
        logger.info "Skipping sending message #{message[:id]} to #{message[:to_address]} as it does not match the defined domain filter (#{cfg['email_to_domain_filter']})"
        next
      end
    end

    email_body = <<~EOF
      From: #{cfg['email_from']}
      To: #{message[:to_address]}
      Subject: #{message[:subject]}
      
      #{message[:body]}
    EOF
    begin
      smtp = Net::SMTP.new(cfg['smtp_server'], cfg['smtp_port'])
      smtp.start('bof-o-matic')
      smtp.send_message(email_body, cfg['email_from'], message[:to_address]);
    rescue Net::SMTPFatalError => e
      logger.warn "Fatal error sending message #{message[:id]}: #{e.replace("\n", " ")}, marking as ERROR"
      message.status = 'ERROR'
      message.save
      smtp.finish
    rescue StandardError => e
      logger.warn "Temporary error sending message #{message[:id]}: #{e}, marking as RETRY"
      message.status = 'RETRY'
      message.save
    else
      logger.info "Successfully sent message #{message[:id]} to #{message[:to_address]}"
      if(cfg['keep_sent_mail']) then
        # Commented this out for testing only!
        logger.debug "Marking message #{message[:id]} as sent"
        message.status = 'SENT'
        message.save
      else
        logger.debug "Deleting message #{message[:id]} from the queue"
        message.destroy
      end
      smtp.finish
    end
  end

  logger.debug "Finished mail run, going to sleep"
  sleep 60
end
