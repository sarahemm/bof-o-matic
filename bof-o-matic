#!/usr/bin/ruby

require 'pp'
require 'haml'
require 'yaml'
require 'time'
require 'sinatra'
require 'sequel'
require 'bcrypt'
require 'net/http'
require './pdf_generator.rb'
require './email_builder.rb'

Sequel.default_timezone = :local
DB = Sequel.connect("sqlite://#{Dir.pwd}/bof-o-matic.sqlite3")
CFG = YAML.load(File.read("bof-o-matic.yaml"))

configure do
  set :conference_name, CFG['conference_name']
  set :conference_start_time, Time.parse(CFG['conference_starts'])
  set :conference_end_time, Time.parse(CFG['conference_ends'])
  set :slot_length, CFG['slot_length']
  set :generate_pdfs, CFG['generate_pdfs']
  set :interest_threshold, CFG['interest_threshold']
end

helpers do
  def nav_link(uri:, text:)
    haml_tag :li, class: 'nav-item'
    if(request.path_info == uri) then
      haml_tag :a, text, href: uri, class: 'nav-link active', 'aria-current': :page
    else
      haml_tag :a, text, href: uri, class: 'nav-link'
    end
  end
end

# bring in all the Sequel models for talking to the DB
require './bom_models.rb'

enable :sessions
set :port, 4590
set :method_override, true

def require_logged_in
  redirect '/login' unless session[:user]
end

def is_logged_in?
  session[:user]
end

not_found do
  'Path not found.' 
end

get '/'  do
  redirect '/proposals'
end

get '/proposals' do
  @proposals = Proposal.association_left_join(:interest)
    .select(Sequel[:proposals][:id], :title, :description, :submitted_by, :name, :room_id)
    .association_left_join(:schedule)
    .select_more{Sequel.as(count(:name), :count)}
    .group(:title)

  haml :proposals
end

get '/proposals/new' do
  haml :proposal_add
end

post '/proposals/new' do
  data = {
    :submitted_by => params[:name],
    :submitter_email => params[:email],
    :title => params[:title],
    :description => params[:description],
    :scheduler_notes => params[:notes]
  }
  new_id = DB[:proposals].insert(data)

  redirect "/proposals/#{new_id}"
end

get '/proposals/:id' do
  @proposal = Proposal[params[:id]]
  haml :proposal
end

# for un-scheduling a BoF
delete '/schedules/:id' do
  require_logged_in

  Schedule[params[:id]].destroy

  queue_emails_when_unscheduled params[:proposal_id], session[:user]

  redirect "/"
end

get '/proposals/:id/interest' do
  @proposal = Proposal[params[:id]]
  haml :interest_add
end

post '/proposals/:id/interest' do
  data = {
    :proposal_id => params[:id],
    :name => params[:name],
    :email => params[:email],
  }
  data[:submitted_at] = Time.now
  DB[:interests].insert(data)

  if(Interest.where(proposal_id: params[:id]).count == settings.interest_threshold) then
    queue_interest_emails(params[:id])
  end

  redirect "/proposals/#{params[:id]}"
end

get '/grid' do
  @proposals = Proposal.association_left_join(:interest)
    .association_join(schedule: :room)
    .select(Sequel[:proposals][:id], :title, :description, :name, :start_time, :room_name, Sequel[:room][:id].as(:room_id))
    .select_more{Sequel.as(count(:name), :count)}
    .group(:title)
  
  if is_logged_in? then
    @unscheduled_proposals = Proposal.association_left_join(:interest)
      .association_left_join(:schedule)
      .select(Sequel[:proposals][:id], :title, :description, :submitted_by, :name, :scheduler_notes)
      .where(start_time: nil)
      .select_more{Sequel.as(count(:name), :count)}
      .group(:title)
    @rooms = Room.where(active: true)
  end

  haml :grid
end

post '/grid' do
  require_logged_in

  data = {
    :proposal_id => params[:proposal_id],
    :room_id => params[:room_id],
    :start_time => Time.parse(params[:timeslot]).strftime("%Y-%m-%d %H:%M:%S"),
    :scheduled_by => session[:user]
  }
  DB[:schedules].insert(data)

  if(settings.generate_pdfs) then
    generate_pdf params[:proposal_id]
  end

  queue_emails_when_scheduled(params[:proposal_id])

  redirect '/grid'
end

get '/proposals/:id/print' do
  require_logged_in

  if(settings.generate_pdfs) then
    generate_pdf params[:id]
  end

  redirect "/proposals/#{params[:id]}"
end

get '/rooms' do
  require_logged_in

  @rooms = Room.all

  haml :rooms
end

post '/rooms' do
  require_logged_in

  if(params[:action] == 'toggle_active') then
    room = Room[params[:id]]
    room.active = !room.active
    room.save
  elsif(params[:action] == 'rename') then
    room = Room[params[:id]]
    room.room_name = params[:name]
    room.save
  elsif(params[:action] == 'add') then
    room = Room.new(room_name: params[:name])
    room.save
  end

  redirect '/rooms'
end

get '/mails' do
  require_logged_in

  @mails = Mail.all

  haml :mails
end

get '/mails/:id' do
  require_logged_in

  @mail = Mail[params[:id]]
  haml :mail
end

get '/login' do
  haml :login
end

post '/login' do
  user = DB[:schedulers].where(username: params[:username]).first
  if user and BCrypt::Password.new(user[:pwhash]) == params[:password] then
    session[:user] = params[:username]
    redirect '/'
  else
    redirect '/login'
  end
end

get '/logout' do
  session.delete :user
  redirect '/'
end

get '/password' do
  require_logged_in

  haml :password
end

post '/password' do
  require_logged_in

  user = Scheduler.where(username: session[:user]).first
  if(params[:new] != params[:newagain]) then
    @message = "New passwords don't match."
    haml :password
  elsif(params[:new].length < 8)
    @message = "New password must be at least 8 characters."
    haml :password
  elsif(BCrypt::Password.new(user[:pwhash]) != params[:existing]) then
    @message = "Existing password is incorrect."
    haml :password
  else
    user.update pwhash: BCrypt::Password.create(params[:new])
    @message = "Password successfully changed."
    haml :password
  end
end

